version: '3.8'
services:
  weather-service:
    container_name: weather-service
    build:
      context: ../../service/reporter
      dockerfile: ../../build/reporter/Dockerfile
    ports:
      - "8070:8080"
    depends_on:
      - weather-service-db
      - weather-cache
      - kafka
    environment:
      - server.port=8080
      - spring.datasource.url=jdbc:postgresql://weather-service-db:5432/weather
      - spring.datasource.username=admin
      - spring.datasource.password=admin
      #- integration.openweather.api-key=<your api key>
      - spring.data.redis.host=weather-cache
      - spring.data.redis.password=admin
      - logging.config=/weather-reporter-app/config/logback/logback.xml
      - spring.kafka.bootstrap-servers=kafka:9092
    volumes:
      - ./config/logback/logback.xml:/weather-reporter-app/config/logback/logback.xml
    labels:
      filebeat_enable: true
      co.elastic.logs: true

  weather-service-db:
    container_name: weather-service-db
    image: postgres:14.7-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5555:5432"
    volumes:
      - ./init-weather-db.sql:/docker-entrypoint-initdb.d/create_db.sql
      - weather-db-data:/var/lib/postgresql/data

  weather-cache:
    container_name: weather-cache
    image: redis:7.2-alpine
    restart: always
    environment:
      - redis.password=admin
    ports:
      - "6379:6379"
    command: redis-server --save 180 1 --loglevel warning --requirepass admin
    volumes:
      - cache-data:/data

  filebeat:
    container_name: filebeat
    image: elastic/filebeat:8.13.4
    volumes:
      - ./config/filebeat/filebeat.yaml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers/:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - filebeat-registry:/usr/share/filebeat/data:rw
    user: root
    command: ["--strict.perms=false"]
    depends_on:
      - logstash
    labels:
      co.elastic.logs: false

  logstash:
    container_name: logstash
    image: logstash:8.13.4
    volumes:
      - ./config/logstash/logstash.yaml:/usr/share/logstash/config/logstash.yml:ro
      - ./config/logstash/pipelines.yaml:/usr/share/logstash/config/pipelines.yml:ro
      - ./config/logstash/pipelines:/usr/share/logstash/config/pipelines:ro
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
      LS_OPTS: "--quiet"
    ports:
      - "5044:5044"
      - "5000:5000"
      - "9600:9600"
    labels:
      co.elastic.logs: false
    depends_on:
      - elasticsearch

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:8.13.4
    volumes:
      - ./config/elasticsearch/elasticsearch.yaml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - elasticsearch:/usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: "-Xmx512m -Xms512m"
      discovery.type: single-node
    ports:
      - "9200:9200"
      - "9300:9300"

  kibana:
    container_name: kibana
    image: kibana:8.13.4
    depends_on:
      - elasticsearch
    volumes:
      - ./config/kibana/kibana.yaml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - "5601:5601"

  kafka:
    container_name: kafka
    image: bitnami/kafka:3.7.0
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_HOST://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9094:9094"

volumes:
  weather-db-data:
  cache-data:
  filebeat-registry:
  elasticsearch: